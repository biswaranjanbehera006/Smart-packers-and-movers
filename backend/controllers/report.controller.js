const PDFDocument = require("pdfkit");
const { Parser } = require("json2csv");
const Booking = require("../models/Booking");

// Helper for async/await error handling
const asyncHandler = (fn) => (req, res, next) => Promise.resolve(fn(req, res, next)).catch(next);

// ================= CSV EXPORT =================

// ✅ Admin - Export All Bookings (CSV)
exports.exportBookingsCSV_Admin = asyncHandler(async (req, res) => {
  const bookings = await Booking.find()
    .populate("user", "name email phone")
    .sort({ createdAt: -1 });

  if (!bookings.length)
    return res.status(404).json({ success: false, message: "No bookings found" });

  const fields = [
    "user.name",
    "user.email",
    "user.phone",
    "serviceType",
    "status",
    "paymentStatus",
    "totalAmount",
    "createdAt",
  ];

  const csv = new Parser({ fields }).parse(bookings);
  res.header("Content-Type", "text/csv");
  res.attachment("All_Bookings_Report.csv");
  res.send(csv);
});

// ✅ User - Export My Bookings (CSV)
exports.exportBookingsCSV_User = asyncHandler(async (req, res) => {
  const bookings = await Booking.find({ user: req.user.userId })
    .populate("user", "name email")
    .sort({ createdAt: -1 });

  if (!bookings.length)
    return res.status(404).json({ success: false, message: "No bookings found" });

  const fields = ["serviceType", "status", "paymentStatus", "totalAmount", "createdAt"];
  const csv = new Parser({ fields }).parse(bookings);

  res.header("Content-Type", "text/csv");
  res.attachment("My_Bookings_Report.csv");
  res.send(csv);
});

// ================= PDF EXPORT =================

// ✅ Helper: Draw Table Row
function drawRow(doc, y, c1, c2, c3, c4, c5) {
  doc.fontSize(10)
    .text(c1, 50, y)
    .text(c2, 150, y)
    .text(c3, 260, y)
    .text(c4, 360, y)
    .text(c5, 460, y);
}

// ✅ Admin - Export All Bookings (PDF)
exports.exportBookingsPDF_Admin = asyncHandler(async (req, res) => {
  const bookings = await Booking.find()
    .populate("user", "name email phone")
    .sort({ createdAt: -1 });

  if (!bookings.length)
    return res.status(404).json({ success: false, message: "No bookings found" });

  const doc = new PDFDocument({ margin: 40, size: "A4" });
  res.setHeader("Content-Type", "application/pdf");
  res.setHeader("Content-Disposition", "attachment; filename=All_Bookings_Report.pdf");

  // === HEADER ===
  const logoUrl =
    "https://res.cloudinary.com/dwxsprktq/image/upload/v1728119205/packers_logo.png"; // replace with your Cloudinary logo
  doc.image(logoUrl, 50, 20, { width: 80 });
  doc.fontSize(18).text("Smart Packers & Movers", 150, 30, { align: "left" });
  doc.fontSize(12).fillColor("gray").text("All Bookings Report", 150, 50);
  doc.moveDown(2);

  // === TABLE HEADER ===
  doc
    .fontSize(12)
    .fillColor("black")
    .text("User", 50, 100)
    .text("Service", 150, 100)
    .text("Status", 260, 100)
    .text("Payment", 360, 100)
    .text("Amount (₹)", 460, 100);

  doc.moveTo(50, 115).lineTo(550, 115).stroke();
  let y = 130;

  let totalRevenue = 0;

  // === TABLE ROWS ===
  bookings.forEach((b) => {
    if (y > 700) {
      doc.addPage();
      y = 50;
    }
    drawRow(
      doc,
      y,
      b.user?.name || "N/A",
      b.serviceType || "N/A",
      b.status,
      b.paymentStatus,
      b.totalAmount || 0
    );
    totalRevenue += b.totalAmount || 0;
    y += 20;
  });

  doc.moveDown(2);
  doc
    .fontSize(12)
    .fillColor("black")
    .text(`Total Bookings: ${bookings.length}`, 50, y + 20)
    .text(`Total Revenue: ₹${totalRevenue.toLocaleString()}`, 50, y + 40);

  // === FOOTER ===
  doc.moveTo(50, 780).lineTo(550, 780).stroke();
  doc.fontSize(10).fillColor("gray").text("Generated by Smart Packers & Movers © 2025", 50, 790);

  doc.end();
  doc.pipe(res);
});

// ✅ User - Export My Bookings (PDF)
exports.exportBookingsPDF_User = asyncHandler(async (req, res) => {
  const bookings = await Booking.find({ user: req.user.userId })
    .populate("user", "name email")
    .sort({ createdAt: -1 });

  if (!bookings.length)
    return res.status(404).json({ success: false, message: "No bookings found" });

  const doc = new PDFDocument({ margin: 40, size: "A4" });
  res.setHeader("Content-Type", "application/pdf");
  res.setHeader("Content-Disposition", "attachment; filename=My_Bookings_Report.pdf");

  // === HEADER ===
  const logoUrl =
    "https://res.cloudinary.com/dwxsprktq/image/upload/v1728119205/packers_logo.png";
  doc.image(logoUrl, 50, 20, { width: 80 });
  doc.fontSize(18).text("Smart Packers & Movers", 150, 30);
  doc.fontSize(12).fillColor("gray").text("My Booking Report", 150, 50);
  doc.moveDown(2);

  // === TABLE HEADER ===
  doc
    .fontSize(12)
    .fillColor("black")
    .text("Service", 50, 100)
    .text("Status", 200, 100)
    .text("Payment", 300, 100)
    .text("Amount (₹)", 420, 100)
    .text("Date", 500, 100);

  doc.moveTo(50, 115).lineTo(550, 115).stroke();
  let y = 130;

  let totalSpent = 0;

  // === TABLE ROWS ===
  bookings.forEach((b) => {
    if (y > 700) {
      doc.addPage();
      y = 50;
    }
    doc
      .fontSize(10)
      .text(b.serviceType || "N/A", 50, y)
      .text(b.status, 200, y)
      .text(b.paymentStatus, 300, y)
      .text(`₹${b.totalAmount || 0}`, 420, y)
      .text(b.createdAt.toLocaleDateString(), 500, y);
    totalSpent += b.totalAmount || 0;
    y += 20;
  });

  // === SUMMARY ===
  doc
    .moveDown(2)
    .fontSize(12)
    .fillColor("black")
    .text(`Total Bookings: ${bookings.length}`, 50, y + 20)
    .text(`Total Spent: ₹${totalSpent.toLocaleString()}`, 50, y + 40);

  // === FOOTER ===
  doc.moveTo(50, 780).lineTo(550, 780).stroke();
  doc.fontSize(10).fillColor("gray").text("Generated by Smart Packers & Movers © 2025", 50, 790);

  doc.end();
  doc.pipe(res);
});
